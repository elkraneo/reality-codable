% warning = "This file was automatically generated and should not be edited."
// ${warning}

% import json
import Foundation
import RealityKit
import RealitySymbols

//MARK: - iOS
% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/iOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:

extension RealityPlatform.iOS {
%if entity["name"] == "Entity":
  //MARK: Entity
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.iOS.Entity]?
    public let id: UInt64
    private(set) public var parent: RealityPlatform.iOS.Entity?

    public init(
      from entity: RealityKit.Entity
    ) {
      self.id = entity.id
    }
    
    public static func == (lhs: RealitySymbols.RealityPlatform.iOS.Entity, rhs: RealitySymbols.RealityPlatform.iOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
%else:
  public class ${entity["name"]}: RealityPlatform.iOS.Entity {
%end
  }
}

#if os(iOS)
%if entity["name"] == "Entity":
extension RealityPlatform.iOS.Entity {
  public convenience init(
   _ entity: RealityKit.Entity
  ) {
    self.init(from: entity)
    self.children = entity.children.map(\.encoded)
    self.parent = entity.parent?.encoded
  }
}
%else:
extension RealityPlatform.iOS.${entity["name"]} {
  public convenience init(
   _ entity: RealityKit.${entity["name"]}
  ) {
    self.init(from: entity)
  }
}
%end
#endif
%end

//MARK: - macOS
% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/macOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:

extension RealityPlatform.macOS {
%if entity["name"] == "Entity":
  //MARK: Entity
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.macOS.Entity]?
    public let id: UInt64
    private(set) public var parent: RealityPlatform.macOS.Entity?

    public init(
      from entity: RealityKit.Entity
    ) {
      self.id = entity.id
    }

    public static func == (lhs: RealitySymbols.RealityPlatform.macOS.Entity, rhs: RealitySymbols.RealityPlatform.macOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
%else:
  public class ${entity["name"]}: RealityPlatform.macOS.Entity {
%end
  }
}

#if os(macOS)
%if entity["name"] == "Entity":
extension RealityPlatform.macOS.Entity {
  public convenience init(
   _ entity: RealityKit.Entity
  ) {
    self.init(from: entity)
    self.accessibilityDescription = entity.accessibilityDescription
    self.children = entity.children.map(\.encoded)
    self.parent = entity.parent?.encoded
  }
}
%else:
extension RealityPlatform.macOS.${entity["name"]} {
  public convenience init(
   _ entity: RealityKit.${entity["name"]}
  ) {
    self.init(from: entity)
  }
}
%end
#endif
%end

//MARK: - visionOS
% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/visionOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:

extension RealityPlatform.visionOS {
%if entity["name"] == "Entity":
  //MARK: Entity
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.visionOS.Entity]?
    public let id: UInt64
    private(set) public var parent: RealityPlatform.visionOS.Entity?

    public init(
      from entity: RealityKit.Entity
    ) {
      self.id = entity.id
    }
    
    public static func == (lhs: RealitySymbols.RealityPlatform.visionOS.Entity, rhs: RealitySymbols.RealityPlatform.visionOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
%else:
  public class ${entity["name"]}: RealityPlatform.visionOS.Entity {
%end
  }
}

#if os(visionOS)
%if entity["name"] == "Entity":
extension RealityPlatform.visionOS.Entity {
  public convenience init(
   _ entity: RealityKit.Entity
  ) {
    self.init(from: entity)
    self.accessibilityDescription = entity.accessibilityDescription
    self.children = entity.children.map(\.encoded)
    self.parent = entity.parent?.encoded
  }
}
%else:
extension RealityPlatform.visionOS.${entity["name"]} {
  public convenience init(
   _ entity: RealityKit.${entity["name"]}
  ) {
    self.init(from: entity)
  }
}
%end
#endif
%end
