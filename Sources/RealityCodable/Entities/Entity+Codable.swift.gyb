% warning = "This file was automatically generated and should not be edited."
// ${warning}

% import json
import Foundation
import RealityKit
import RealitySymbols

//MARK: - iOS

% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/iOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:


//MARK: ${entity["name"]}

extension RealityPlatform.iOS {
%if entity["name"] == "Entity":
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.iOS.Entity]?
    public let id: UInt64
    private(set) public var name: String?
    private(set) public var parentID: UInt64?

    init(
      id: UInt64
    ) {
      self.id = id
    }
    
    public static func == (lhs: RealityPlatform.iOS.Entity, rhs: RealityPlatform.iOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
  }
%else:
  public class ${entity["name"]}: RealityPlatform.iOS.Entity {}
%end
}

#if os(iOS)
%if entity["name"] == "Entity":
extension RealityPlatform.iOS.Entity {
  convenience init(rawValue entity: RealityKit.Entity) {
    self.init(id: entity.id)
    self.accessibilityDescription = entity.accessibilityDescription
    self.children = entity.children.map(\.encoded)
    self.name = entity.name
    self.parentID = entity.parent?.id
  }
}
%else:
extension RealityPlatform.iOS.${entity["name"]} {}
%end
#endif
%end

//MARK: - macOS

% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/macOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:


//MARK: ${entity["name"]}

extension RealityPlatform.macOS {
%if entity["name"] == "Entity":
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.macOS.Entity]?
    public let id: UInt64
    private(set) public var name: String?
    private(set) public var parentID: UInt64?

    init(
      id: UInt64
    ) {
      self.id = id
    }
    
    public static func == (lhs: RealityPlatform.macOS.Entity, rhs: RealityPlatform.macOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
  }
%else:
  public class ${entity["name"]}: RealityPlatform.macOS.Entity {}
%end
}

#if os(macOS)
%if entity["name"] == "Entity":
extension RealityPlatform.macOS.Entity {
  convenience init(rawValue entity: RealityKit.Entity) {
    self.init(id: entity.id)
    self.accessibilityDescription = entity.accessibilityDescription
    self.children = entity.children.map(\.encoded)
    self.name = entity.name
    self.parentID = entity.parent?.id
  }
}
%else:
extension RealityPlatform.macOS.${entity["name"]} {}
%end
#endif
%end

//MARK: - visionOS

% with open('../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted/visionOS/Processed/Entities.json') as file:
% data = json.load(file)
% for entity in data:


//MARK: ${entity["name"]}

extension RealityPlatform.visionOS {
%if entity["name"] == "Entity":
  public class ${entity["name"]}: Codable, Equatable, Identifiable {
    private(set) public var accessibilityDescription: String?
    private(set) public var children: [RealityPlatform.visionOS.Entity]?
    public let id: UInt64
    private(set) public var name: String?
    private(set) public var parentID: UInt64?

    init(
      id: UInt64
    ) {
      self.id = id
    }
    
    public static func == (lhs: RealityPlatform.visionOS.Entity, rhs: RealityPlatform.visionOS.Entity) -> Bool {
      lhs.id == rhs.id
    }
  }
%else:
  public class ${entity["name"]}: RealityPlatform.visionOS.Entity {}
%end
}

#if os(visionOS)
%if entity["name"] == "Entity":
extension RealityPlatform.visionOS.Entity {
  convenience init(rawValue entity: RealityKit.Entity) {
    self.init(id: entity.id)
    self.accessibilityDescription = entity.accessibilityDescription
    self.children = entity.children.map(\.encoded)
    self.name = entity.name
    self.parentID = entity.parent?.id
  }
}
%else:
extension RealityPlatform.visionOS.${entity["name"]} {}
%end
#endif
%end
